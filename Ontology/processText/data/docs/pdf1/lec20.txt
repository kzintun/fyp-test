In the previous lecture we introduced a class of FFT algorithms referred to as "decimation-in-frequency." This class of algorithms is developed on the basis of successive subdivisions of the output, as comparedwith the "decimation-in-time" algorithms which are based on successive subdivisions of the input. While the flowgraph for decimation-in­ frequency as initially derived represents an in-place computation with the input in normal order and the output in bit-reversed order, there are a variety of rearrangements of the flowgraph just as there werefor the "decimation-in-time" algorithms. The various forms of the "decimation-in-frequency" flowgraphs are related to the decimation-in­ time" flowgraph through the transposition theorem. The choice between the various forms of the FFT algorithm is generally based on such considerations as the importance of in-place computation, whether it is more convenient to require bit-reversal at the input or output, orderin which coefficients are stored, etc. For example if we intend to follow a DFT by an inverse DFT it is generally preferable to begin with an algorithm for which the input is in normal order and the output is in bit-reversed order. If for the inverse transform a form of the algorithm is used which requires bit-reversed input data and generates the output in normal order, it is never necessary to rearrange the order of the data.Throughout the discussion of the FFT algorithms we have concentrated on "radix-2" algorithms, i.e. we have assumed that N is a power of two.More generally, efficient algorithms for the computation of the DFT can be utilized when N is decomposable as a product of factors. We conclude this lecture with a brief introduction to these more general classes of FFT algorithms.